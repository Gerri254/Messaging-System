// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  password             String
  firstName            String
  lastName             String
  phone                String?
  isVerified           Boolean   @default(false)
  emailVerifiedAt      DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  contacts         Contact[]
  contactGroups    ContactGroup[]
  messages         Message[]
  messageTemplates MessageTemplate[]
  userSessions     UserSession[]

  @@map("users")
}

model Contact {
  id           String   @id @default(cuid())
  userId       String
  name         String
  phone        String
  email        String?
  notes        String?
  tags         Json?    @default("[]")
  customFields Json?    @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  groups            ContactGroupContact[]
  messageRecipients MessageRecipient[]

  @@index([userId])
  @@index([phone])
  @@map("contacts")
}

model ContactGroup {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts ContactGroupContact[]

  @@index([userId])
  @@map("contact_groups")
}

model ContactGroupContact {
  id             String @id @default(cuid())
  contactId      String
  contactGroupId String

  // Relations
  contact      Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactGroup ContactGroup @relation(fields: [contactGroupId], references: [id], onDelete: Cascade)

  @@unique([contactId, contactGroupId])
  @@map("contact_group_contacts")
}

enum MessageStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

model Message {
  id                String        @id @default(cuid())
  userId            String
  subject           String?
  content           String
  messageType       String        @default("SMS") // SMS, EMAIL
  status            MessageStatus @default(DRAFT)
  scheduledAt       DateTime?
  sentAt            DateTime?
  totalRecipients   Int           @default(0)
  successCount      Int           @default(0)
  failedCount       Int           @default(0)
  cost              Float?
  templateId        String?
  templateVariables Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   MessageTemplate?   @relation(fields: [templateId], references: [id])
  recipients MessageRecipient[]
  logs       MessageLog[]

  @@index([userId])
  @@index([status])
  @@index([scheduledAt])
  @@map("messages")
}

model MessageTemplate {
  id         String   @id @default(cuid())
  userId     String
  name       String
  subject    String?
  content    String
  variables  Json? // Array of variable names like ["firstName", "lastName"]
  category   String?
  isActive   Boolean  @default(true)
  usageCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId])
  @@index([category])
  @@map("message_templates")
}

enum MessageRecipientStatus {
  PENDING
  SENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
}

model MessageRecipient {
  id           String                 @id @default(cuid())
  messageId    String
  contactId    String?
  phone        String
  email        String?
  name         String?
  status       MessageRecipientStatus @default(PENDING)
  sentAt       DateTime?
  deliveredAt  DateTime?
  errorMessage String?
  twilioSid    String?
  cost         Float?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  // Relations
  message Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  contact Contact? @relation(fields: [contactId], references: [id])

  @@index([messageId])
  @@index([status])
  @@index([phone])
  @@map("message_recipients")
}

model MessageLog {
  id           String   @id @default(cuid())
  messageId    String
  recipientId  String?
  event        String // SENT, DELIVERED, FAILED, BOUNCED, etc.
  status       String?
  errorCode    String?
  errorMessage String?
  twilioSid    String?
  metadata     Json?
  createdAt    DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([event])
  @@index([createdAt])
  @@map("message_logs")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  userAgent String?
  ipAddress String?
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("user_sessions")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}
